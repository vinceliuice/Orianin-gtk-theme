// generic drawing of more complex things

// ripple effect animations

@keyframes ripple {
  from {
    background-image: radial-gradient(circle farthest-corner at center, $overlay-checked 30%, transparent 0%);
  }

  to {
    background-image: radial-gradient(circle farthest-corner at center, $overlay-checked 100%, transparent 0%);
  }
}

@keyframes ripple-on-slider {
  from {
    background-image: radial-gradient(circle farthest-corner at center, $overlay-active 0%, transparent 0%);
  }

  to {
    background-image: radial-gradient(circle farthest-corner at center, $overlay-active 100%, transparent 0%);
  }
}

@keyframes ripple-on-headerbar {
  from {
    background-image: radial-gradient(circle farthest-corner at center, $primary 30%, transparent 0%);
  }

  to {
    background-image: radial-gradient(circle farthest-corner at center, $primary 100%, transparent 0%);
  }
}

@mixin entry($t, $fc: $outline-checked, $b: $entry, $fg: $text) {
//
// entry
//
// $t: entry type
// $fc: focus color
//

  @if $t == normal {
    transition: $transition, box-shadow $ripple-fade-out-duration $ease-out;
    box-shadow: inset 0 -3px $outline-normal;
    background-color: $b;
    outline: none;
    color: rgba($fg, 0.8);
  }

  @if $t == hover {
    background-color: $b;
    box-shadow: inset 0 -3px $outline-hover;
    outline: none;
    color: $fg;
  }

  @if $t == focus {
    background-color: $b;
    box-shadow: inset 0 -3px $outline-focus;
    outline: none;
    color: $fg;
  }

  @if $t == checked {
    background-color: $b;
    box-shadow: inset 0 -3px if($fc == $outline-checked, $outline-checked, $fc);
    outline: none;
    color: $fg;
  }

  @if $t == disabled {
    box-shadow: inset 0 -3px $outline-disabled;
    background-color: $b;
    outline: none;
    color: rgba($fg, 0.35);
  }
}

@mixin button($t, $b: $button, $fg: $text) {
//
// button
//
// $t: button type
//

  @if $t == normal {
    transition: $transition,
                box-shadow $ripple-fade-out-duration $ease-out;
    outline: none;
    box-shadow: inset 0 0 0 3px $outline-normal;
    background-color: $b;
    color: rgba($fg, 0.8);
  }

  @if $t == hover {
    box-shadow: inset 0 0 0 3px $outline-hover;
    background-color: $b;
    color: $fg;
  }

  @if $t == focus {
    box-shadow: inset 0 0 0 3px $outline-focus;
    background-color: $b;
    color: $fg;
  }

  @if $t == active {
    box-shadow: inset 0 0 0 3px $outline-active;
    background-color: $b;
    color: rgba($fg, 0.35);
  }

  @if $t == disabled {
    box-shadow: inset 0 0 0 3px $outline-disabled;
    background-color: $b;
    color: rgba($fg, 0.35);
  }

  @if $t == checked {
    box-shadow: inset 0 0 0 3px $primary;
    background-color: $b;
    color: $primary;
  }

  @if $t == checked-hover {
    box-shadow: inset 0 0 0 3px mix($text, $primary, 10%);
    background-color: $b;
    color: mix($text, $primary, 10%);
  }

  @if $t == checked-disabled {
    box-shadow: inset 0 0 0 3px rgba($primary, 0.45);
    background-color: $b;
    color: rgba($primary, 0.45);
  }

  @if $t == flat-normal {
    transition: $transition,
                box-shadow $ripple-fade-out-duration $ease-out;
    outline: none;
    box-shadow: inset 0 0 0 3px transparent;
    background-color: transparent;
    color: rgba($fg, 0.8);
  }

  @if $t == flat-hover {
    box-shadow: inset 0 0 0 3px $outline-hover;
    color: $fg;
  }

  @if $t == flat-focus {
    box-shadow: inset 0 0 0 3px $outline-focus;
    color: $fg;
  }

  @if $t == flat-active {
    box-shadow: inset 0 0 0 3px $outline-active;
    color: rgba($fg, 0.35);
  }

  @if $t == flat-disabled {
    box-shadow: none;
    color: rgba($fg, 0.35);
  }

  @if $t == flat-checked {
    box-shadow: inset 0 0 0 3px $primary;
    color: $primary;
  }

  @if $t == flat-checked-disabled {
    box-shadow: inset 0 0 0 3px rgba($primary, 0.45);
    color: rgba($primary, 0.45);
  }

  @if $t == linked-normal {
    box-shadow: inset 0 -3px $outline-normal;
    background-color: $b;
    color: rgba($fg, 0.8);
  }

  @if $t == linked-hover {
    background-color: $b;
    box-shadow: inset 0 -3px $outline-hover;
    color: $fg;
  }

  @if $t == linked-focus {
    background-color: $b;
    box-shadow: inset 0 -3px $outline-focus;
    color: $fg;
  }

  @if $t == linked-active {
    background-color: $b;
    box-shadow: inset 0 -3px $outline-active;
    color: rgba($fg, 0.35);
  }

  @if $t == linked-checked {
    background-color: $b;
    box-shadow: inset 0 -3px $primary;
    color: $primary;
  }

  @if $t == linked-checked-disabled {
    box-shadow: inset 0 -3px rgba($primary, 0.45);
    color: rgba($primary, 0.45);
  }

  @if $t == linked-disabled {
    box-shadow: inset 0 -3px $outline-disabled;
    background-color: $b;
    color: rgba($fg, 0.35);
  }
}


@mixin overshoot($p) {
//
// overshoot
//
// $p: position
// $t: type
// $c: base color
//
// possible $p values:
// top, bottom, right, left
//
// possible $t values:
// normal, backdrop
//

  $_position: center $p;

  @if ($p == left) or ($p == right) {
    $_position: $p center;
  }

  background-size: 200% 70%;
  background-image: radial-gradient( farthest-side at $p, $fill 99%, transparent 100%);
  background-repeat: no-repeat;
  background-position: $_position;

  background-color: transparent; // reset some properties to be sure to not inherit them somehow
  border: none;                  //
  box-shadow: none;              //
}


@mixin undershoot($p, $c: $frame, $neighbor: false, $style: compact) {
//
// undershoot
//
// $p: position
// $c: shade color
// $neighbor: use ~ instead of >
//
// possible $p values:
// top, bottom, right, left
//

  $_border_pos: '';
  $_direction: '';
  $_selector: if($neighbor, '~', '>');

  @if $p==top {
    $_direction: bottom;
    $_border_pos: 0 1px;
  } @else if $p==bottom {
    $_direction: top;
    $_border_pos: 0 -1px;
  } @else if $p==left {
    $_direction: right;
    $_border_pos: 1px 0;
  } @else if $p==right {
    $_direction: left;
    $_border_pos: -1px 0;
  } @else {
    @error "Unknown position #{$p}"
  }

  #{$_selector} undershoot.#{$p} {
    @if $style == 'compact' {
      box-shadow: none;
    } @else {
      box-shadow: inset $_border_pos $border;
    }

    background: linear-gradient(to $_direction, gtkalpha($c, .75), transparent 4px);
  }
}
  
@mixin background-shadow($direction, $color) {
  background-image:
    linear-gradient($direction,
                    gtkalpha($color, 0.7),
                    gtkalpha($color, 0.14) 40px,
                    gtkalpha($color, 0) 56px),
    linear-gradient($direction,
                    gtkalpha($color, 0.4),
                    gtkalpha($color, 0.14) 7px,
                    gtkalpha($color, 0) 24px);
}

@mixin transition-shadows($color) {
  > dimming {
    background: $color;
  }

  > border {
    background: none;
  }

  > shadow {
    min-width: 56px;
    min-height: 56px;

    &.left  { @include background-shadow(to right,  $color); }
    &.right { @include background-shadow(to left,   $color); }
    &.up    { @include background-shadow(to bottom, $color); }
    &.down  { @include background-shadow(to top,    $color); }
  }
}
